generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  full_name    String?
  gender       String?
  birth_day    String?
  password     String
  foto_url     String?
  token        Token[]
  measurements Measurement[]
  nutrition    Nutrition[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model Nutrition {
  id               String            @id @default(uuid())
  user_id          String
  food_name        String
  date             String
  portion          Float
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  User             User              @relation(fields: [user_id], references: [id])
  Nutrition_Result Nutrition_Result? @relation()
}

model Nutrition_Result {
  id            String    @id @default(uuid())
  nutrition_id  String    @unique
  calciums      Float
  calories      Float
  fats          Float
  carbohydrates Float
  proteins      Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  nutrtion      Nutrition @relation(fields: [nutrition_id], references: [id])
}

model Measurement {
  id                  String              @id @default(uuid())
  user_id             String
  date_measure        String
  level_activity      String
  weight              Float
  status_asi          String
  baby_photo_url      String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  user                User?               @relation(fields: [user_id], references: [id])
  measuremenet_result Measurement_Result? @relation()
  IMT_Result          IMT_Result?         @relation()
}

model IMT_Result {
  id                        String      @id @default(uuid())
  measure_id                String      @unique
  baby_length               Float
  z_score_bb_tb             Float
  status_imt                String
  imt                       Float
  z_score_length            Float
  z_score_weight            Float
  nitritional_status_weight String
  nitritional_status_length String
  status_bb_tb              String
  measurement               Measurement @relation(fields: [measure_id], references: [id])
}

model Measurement_Result {
  id                  String      @id @default(uuid())
  measure_id          String      @unique
  calories_needed     Float
  protein_needed      Float
  fat_needed          Float
  carbohydrate_needed Float
  measurement         Measurement @relation(fields: [measure_id], references: [id])
}

enum STATUS_RESULT {
  NORMAL
  STUNTING
  OBESITAS
}

model Token {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @db.Text
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Articles {
  id              String   @id @default(uuid())
  title           String
  constent        String   @db.Text
  author          String?
  article_img_url String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}
